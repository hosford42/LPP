/*
   lpp_init.c #;("and lpp_init.c.lpp")
     LPP interpreter initialization. #;("and the LPP template thereof")
   
   Copyright 2013 Aaron Hosford

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */

#;((if (! lpp.lsp-loaded) '(load "lpp.lsp"))
   (if (! lpp_funcs.lsp-loaded) '(load "lpp_funcs.lsp")))

##ifndef LPP_INIT_C
##define LPP_INIT_C

##include "lpp_init.h"

##define LTYPE_SETUP(tp, mprefix) {\
  Ltypes[tp].do_delete = Ldelete_####mprefix;\
  Ltypes[tp]._1methods[LTO_STRING] = L####mprefix####_to_string;\
  Ltypes[tp]._1methods[LEVAL] = L####mprefix####_eval;\
  Ltypes[tp]._1methods[LCOPY] = L####mprefix####_copy;\
  Ltypes[tp]._2methods[LEQUALS] = L####mprefix####_equals;\
  Ltypes[tp].token = mprefix####_token;\
}

void Linit_types() {
  Lobj *symbol_token = Lmake_type_token("@symbol");
  Lobj *number_token = Lmake_type_token("@number");
  Lobj *string_token = Lmake_type_token("@string");
  Lobj *cons_token = Lmake_type_token("@cons-cell");
  Lobj *quote_token = Lmake_type_token("@quote-cell");
  Lobj *func_token = Lmake_type_token("@function");
  Lobj *lambda_token = func_token;
  Lobj *stream_token = Lmake_type_token("@stream");
  Lobj *type_token_token = Lmake_type_token("@class");
  Lobj *exception_token = Lmake_type_token("@exception");
  Lobj *deactivated_exception_token = Lmake_type_token("@caught-exception");
  Lobj *UDclass_token = Lmake_type_token("@class");
  Lobj *UDobject_token = Lmake_type_token("@object");
  Lobj *array_token = Lmake_type_token("@array");

  LTYPE_SETUP(LTSYMBOL, symbol);
  LTYPE_SETUP(LTNUMBER, number);
  LTYPE_SETUP(LTSTRING, string);
  LTYPE_SETUP(LTCONS, cons);
  LTYPE_SETUP(LTQUOTE, quote);
  LTYPE_SETUP(LTFUNC, func);
  LTYPE_SETUP(LTLAMBDA, lambda);
  LTYPE_SETUP(LTSTREAM, stream);
  LTYPE_SETUP(LTTYPE_TOKEN, type_token);
  LTYPE_SETUP(LTEXCEPTION, exception);
  LTYPE_SETUP(LTDEACTIVATED_EXCEPTION, exception);
  LTYPE_SETUP(LTUDCLASS, UDclass);
  LTYPE_SETUP(LTUDOBJECT, UDobject);
  LTYPE_SETUP(LTARRAY, array);
  
  /* Special cases: */
  Ltypes[LTDEACTIVATED_EXCEPTION].token = deactivated_exception_token;
}

##undef LTYPE_SETUP


##define LFUNC_SETUP(fc, lname, doc) \
LSET(Lcons_car(Lsymbol_vals(Llookup_symbol(lname + 1))), Lmake_func(lname, doc, LF####fc))

##define LFUNC_ALSO(symval, lname) \
LSET(Lcons_car(Lsymbol_vals(Llookup_symbol(lname))), symval)

void Linit_funcs() {
  #$((lpp-make-func-inits))
}

##undef LFUNC_ALSO
##undef LFUNC_SETUP

void Linit() {
  Linit_types();
  Linit_funcs();
  
  Lquiet_mode = 0;
  
  Lprompt_input = 1;
  Linput_report = 1;
  Loutput_report = 1;
  
  LINIT(Linput_prompt_string, Lmake_string("\n\n: "));
  LINIT(Linput_report_prompt_string, Lmake_string("\n< "));
  LINIT(Loutput_report_prompt_string, Lmake_string("\n> "));
  
  LINIT(Lt, LSET(Lcons_car(Lsymbol_vals(Llookup_symbol("t"))), Llookup_symbol("t")));
  Llookup_symbol("nil");
  
  char *temp = (char *) getenv("LPPPATH");
  if(temp) {
    bin_dir = temp;
  } else {
    bin_dir = "#$((? bin-dir 'bin-dir "."))";
  }
  LSET(Lcons_car(Lsymbol_vals(Llookup_symbol("lpp-path"))), Lmake_string(bin_dir));
  
  lpp_version = "#$((? version-string 'version-string "unknown"))";
}

##endif /* LPP_INIT_C */
